AWSTemplateFormatVersion: '2010-09-09'
# aws cloudformation deploy --stack-name efs-example --template-file efs-example.yaml --capabilities CAPABILITY_IAM --parameter-overrides "BaseStackName=base"
Parameters:
  BaseStackName:
    Type: String
    Description: Name of the base stack

Resources:

  HTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: HTTP access
      VpcId: !ImportValue
        'Fn::Sub': '${BaseStackName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  NFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: NFS access
      VpcId: !ImportValue
        'Fn::Sub': '${BaseStackName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  ECSLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: EfsExampleLoadBalancer
      Subnets:
        - !ImportValue
          'Fn::Sub': '${BaseStackName}-PublicSubnet1ID'
        - !ImportValue
          'Fn::Sub': '${BaseStackName}-PublicSubnet2ID'
      Type: application  # it's the default, here for clarity
      SecurityGroups:
        - !Ref HTTPSecurityGroup

  ECSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Name: deployment-example-target-group
      Port: 8080
      Protocol: HTTP
      HealthCheckPath: '/ors/v2/health'
      HealthCheckTimeoutSeconds: 120
      HealthCheckIntervalSeconds: 125
      VpcId: !ImportValue
        'Fn::Sub': '${BaseStackName}-VPCID'

  ECSLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ECSLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSTargetGroup

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: EFSExampleCluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # IAM role that executes ECS actions such as pulling the image and storing the application logs in cloudwatch
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 1024
      Memory: 2048
      NetworkMode: awsvpc
      # Tasks and services that use the awsvpc network mode require the Amazon ECS service-linked role to provide Amazon ECS with the permissions to make calls to other AWS services on your behalf
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      # The TaskRole is the IAM role used by the task itself. For example, if your container wants to call other AWS services like S3, SQS, etc then those permissions would need to be covered by the TaskRole
      # TaskRoleArn: ???
      ContainerDefinitions:
        - Name: openroute
          Image: openrouteservice/openrouteservice:latest
          PortMappings:
            - ContainerPort: 8080
          MountPoints:
            - ContainerPath: /mount
              SourceVolume: "my-volume"
              ReadOnly: false
            
      RequiresCompatibilities:
        - EC2
      Volumes:
        - Name: "my-volume"
          EFSVolumeConfiguration:
            TransitEncryption: ENABLED
            FilesystemId: !Ref FileSystem
            AuthorizationConfig:
              AccessPointId: !Ref AccessPoint

  ECSService:
    Type: AWS::ECS::Service
    # The Amazon ECS service requires an explicit dependency on the Application Load Balancer listener rule and the Application Load Balancer listener. This prevents the service from starting before the listener is ready.
    DependsOn: [ECSLoadBalancerListener, FileSystemMount1, FileSystemMount2]
    Properties:
      DesiredCount: 1
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      # Required since NetworkMode is set to awsvpc in the task def
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref HTTPSecurityGroup
          Subnets:
            - !ImportValue
              'Fn::Sub': '${BaseStackName}-PublicSubnet1ID'
            - !ImportValue
              'Fn::Sub': '${BaseStackName}-PublicSubnet2ID'
      TaskDefinition: !Ref ECSTaskDefinition
      LoadBalancers:
        - TargetGroupArn: !Ref ECSTargetGroup
          ContainerPort: 8080
          ContainerName: openroute

  FileSystem:
    Type: AWS::EFS::FileSystem

  FileSystemMount1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
        - !Ref NFSSecurityGroup
      SubnetId: !ImportValue
          'Fn::Sub': '${BaseStackName}-PublicSubnet1ID'

  FileSystemMount2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
        - !Ref NFSSecurityGroup
      SubnetId: !ImportValue
          'Fn::Sub': '${BaseStackName}-PublicSubnet2ID'

  AccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref FileSystem
      PosixUser:
        Uid: '1000'
        Gid: '1000'
      RootDirectory:
        Path: "/openroute"
        CreationInfo:
          OwnerGid: '1000'
          OwnerUid: '1000'
          Permissions: '000'
