AWSTemplateFormatVersion: "2010-09-09"
#AWS_REGION=us-east-1 aws cloudformation deploy --stack-name base --template-file base_template.yaml --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM --parameter-overrides "DeveloperEmail=xyz@example.com"
#AWS_REGION=us-east-1 aws cloudformation delete-stack --stack-name base
Description: Base template
Parameters:
  DeveloperEmail:
    Type: String
    Description: Email to add to general notifications

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select: 
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      # Has to be within the vpc CIDR
      CidrBlock: 172.31.0.0/20
      MapPublicIpOnLaunch: true
      # !Ref Vpc is equivalent to !GetAtt Vpc.VpcId
      VpcId: !Ref Vpc

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select: 
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: 172.31.48.0/20
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.31.64.0/20
      VpcId: !Ref Vpc

  GeneralNotificationsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: general-notifications
      DisplayName: General Notifications
      Subscription:
        - Protocol: email
          Endpoint: !Ref DeveloperEmail

  # Plausibly this should be region specific or in a non-region specific stack
  Budget:
    Type: AWS::Budgets::Budget
    Properties:
      Budget:
        BudgetName: Sanity Check
        BudgetType: COST
        TimeUnit: DAILY
        BudgetLimit:
          Amount: 1
          Unit: USD
      NotificationsWithSubscribers:
        - Notification:
            NotificationType: ACTUAL
            Threshold: 100
            ComparisonOperator: GREATER_THAN
          Subscribers:
            - SubscriptionType: SNS
              Address: !Ref GeneralNotificationsTopic

  MiscBucket:
    Type: AWS::S3::Bucket
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  AdminGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: Administrators

  DenyAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Groups:
        - !Ref AdminGroup
      PolicyName: BlockMostAccessUnlessSignedInWithMFA
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Sid: BlockMostAccessUnlessSignedInWithMFA
          Effect: Deny
          NotAction: 
            - 'iam:CreateVirtualMFADevice'
            - 'iam:DeleteVirtualMFADevice'
            - 'iam:ListVirtualMFADevices'
            - 'iam:EnableMFADevice'
            - 'iam:ResyncMFADevice'
            - 'iam:ListAccountAliases'
            - 'iam:ListUsers'
            - 'iam:ListSSHPublicKeys'
            - 'iam:ListAccessKeys'
            - 'iam:ListServiceSpecificCredentials'
            - 'iam:ListMFADevices'
            - 'iam:GetAccountSummary'
            - 'sts:GetSessionToken'
          Resource: "*"
          Condition: 
            Bool: 
              aws:MultiFactorAuthPresent: false
              aws:ViaAWSService: false

  # https://github.com/aws-actions/configure-aws-credentials#sample-iam-oidc-cloudformation-template
  GithubOidc:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList: 
        - sts.amazonaws.com
      # Note that the thumbprint has been set to all F's because the thumbprint is not used when authenticating tokens.actions.githubusercontent.com. Instead, IAM uses its library of trusted CAs to authenticate. However, this value is still required by the API
      ThumbprintList:
        - ffffffffffffffffffffffffffffffffffffffff              

Outputs:

  VpcId:
    Description: Id of the VPC
    Value: !Ref Vpc
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"

  PublicSubnet1Id:
    Description: Id of public subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1ID"

  PublicSubnet2Id:
    Description: Id of public subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2ID"

  PrivateSubnetId:
    Description: Id of the private subnet
    Value: !Ref PrivateSubnet
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetID"

  MiscBucketName:
    Description: Name of the misc s3 bucket
    Value: !Ref MiscBucket
    Export:
      Name: !Sub "${AWS::StackName}-MiscBucket"

  GithubOidc:
    Description: Github OIDC
    Value: !Ref GithubOidc
    Export:
      Name: !Sub "${AWS::StackName}-GithubOidc"

  GeneralNotificationsTopic:
    Description: General Notifications Topic
    Value: !Ref GeneralNotificationsTopic
    Export:
      Name: !Sub "${AWS::StackName}-GeneralNotificationsTopic"
