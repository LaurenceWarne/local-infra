AWSTemplateFormatVersion: '2010-09-09'
# aws cloudformation deploy --stack-name ecs-aiohttp-server-example --template-file ecs.yaml --capabilities CAPABILITY_IAM --parameter-overrides "BaseStackName=base"
Parameters:
  BaseStackName:
    Type: String
    Description: Name of the base stack

Resources:

  HTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: HTTP access
      VpcId: !ImportValue
        'Fn::Sub': '${BaseStackName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  ECSLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: AioHTTPServerExampleLoadBalancer
      Subnets:
        - !ImportValue
          'Fn::Sub': '${BaseStackName}-PublicSubnet1ID'
        - !ImportValue
          'Fn::Sub': '${BaseStackName}-PublicSubnet2ID'
      Type: application  # it's the default, here for clarity
      SecurityGroups:
        - !Ref HTTPSecurityGroup

  ECSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Name: deployment-example-target-group
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue
        'Fn::Sub': '${BaseStackName}-VPCID'

  ECSLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ECSLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSTargetGroup

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: AioHTTPServerExampleCluster

  # IAM role that executes ECS actions such as pulling the image and storing the application logs in cloudwatch
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      # Tasks and services that use the awsvpc network mode require the Amazon ECS service-linked role to provide Amazon ECS with the permissions to make calls to other AWS services on your behalf
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      # The TaskRole is the IAM role used by the task itself. For example, if your container wants to call other AWS services like S3, SQS, etc then those permissions would need to be covered by the TaskRole
      # TaskRoleArn: ???
      ContainerDefinitions:
        - Name: aiohttp-server-container
          Image: laurencewarne/aiohttp-server-example:latest
          PortMappings:
            - ContainerPort: 80
      RequiresCompatibilities:
        - EC2

  ECSService:
    Type: AWS::ECS::Service
    # The Amazon ECS service requires an explicit dependency on the Application Load Balancer listener rule and the Application Load Balancer listener. This prevents the service from starting before the listener is ready.
    DependsOn: ECSLoadBalancerListener
    Properties:
      DesiredCount: 2
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      # Required since NetworkMode is set to awsvpc in the task def
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref HTTPSecurityGroup
          Subnets:
            - !ImportValue
              'Fn::Sub': '${BaseStackName}-PublicSubnet1ID'
            - !ImportValue
              'Fn::Sub': '${BaseStackName}-PublicSubnet2ID'
      TaskDefinition: !Ref ECSTaskDefinition
      LoadBalancers:
        - TargetGroupArn: !Ref ECSTargetGroup
          ContainerPort: 80
          ContainerName: aiohttp-server-container
